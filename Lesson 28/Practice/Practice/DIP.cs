namespace Practice
{
    //Принцип инверсии зависимостей(Dependency Inversion Principle, DIP) является одним из принципов объектно-ориентированного программирования и означает,
    //что модули верхнего уровня не должны зависеть от модулей нижнего уровня.Оба должны зависеть от абстракций.
    //Абстракции не должны зависеть от деталей. Детали должны зависеть от абстракций.
    //Применение принципа инверсии зависимостей на C# достигается через использование интерфейсов или абстрактных классов для определения абстракций
    //, а затем инверсии зависимостей путем программирования на уровне абстракций.

    // Плохой пример
    //class Database
    //{
    //    public void SaveData(string data)
    //    {
    //        // Код сохранения данных в базу данных
    //    }
    //}

    //class UserService
    //{
    //    private Database database;

    //    public UserService()
    //    {
    //        database = new Database();
    //    }

    //    public void RegisterUser(string username, string password)
    //    {
    //        // Регистрация пользователя
    //        string userData = "";// Получение данных о пользователе
    //        database.SaveData(userData);
    //    }

    //}
    //В плохом примере класс UserService жестко зависит от класса Database, что нарушает принцип инверсии зависимостей.
    //Если мы захотим заменить Database другой реализацией, например,
    //FileStorage, нам придется изменять код UserService, что приводит к жесткой связанности и усложняет его тестирование и поддержку.


    interface IDataStorage
    {
        void SaveData(string data);
    }

    class Database : IDataStorage
    {
        public void SaveData(string data)
        {
            // Код сохранения данных в базу данных
        }
    }

    class FileStorage : IDataStorage
    {
        public void SaveData(string data)
        {
            // Код сохранения данных в файловую систему
        }
    }

    class UserService
    {
        private IDataStorage dataStorage;

        public UserService(IDataStorage dataStorage)
        {
            this.dataStorage = dataStorage;
        }

        public void RegisterUser(string username, string password)
        {
            // Регистрация пользователя
            string userData = "";// Получение данных о пользователе
            dataStorage.SaveData(userData);
        }
    }
    //Класс UserService зависит от абстракции IDataStorage, а не от конкретной реализации. Это позволяет нам передать различные реализации IDataStorage,
    //такие как Database или FileStorage, в UserService без необходимости изменения его кода. Таким образ
    //Таким образом, применение принципа инверсии зависимостей позволяет достичь гибкости и расширяемости кода.
    //Классы верхнего уровня, такие как UserService, зависят от абстракций, что облегчает замену конкретных
    //реализаций и упрощает тестирование и поддержку кода.Принцип инверсии зависимостей также способствует разделению ответственностей
    //и улучшает модульность приложения.Классы, реализующие конкретные детали (например, Database или FileStorage),
    //зависят от абстракций и могут быть заменены или изменены независимо от классов верхнего уровня.
    //Применение инверсии зависимостей ведет к созданию слабо связанных компонентов, что облегчает повторное использование кода и поддержку приложения.
}
using Lesson26.DataAccess.DbPatterns.Interfaces;
using Microsoft.EntityFrameworkCore;
using System.Linq.Expressions;

namespace Lesson26.DataAccess.DbPatterns
{
    public class GenericRepository<T> : IGenericRepository<T> where T : class
    {
        private readonly MyDbContext _context;

        public GenericRepository(MyDbContext context)
        {
            _context = context;
        }

        public async Task<T> Create(T t)
        {
            _context.Set<T>().Add(t);
            //.Set<T>() является методом объекта DbContext, который возвращает объект DbSet<T>, представляющий набор сущностей T в базе данных.
            //DbSet<T> предоставляет функциональность для выполнения операций CRUD (создание, чтение, обновление, удаление) над сущностями T в базе данных.
            //Каждый объект DbSet<T> отображает таблицу базы данных, которая соответствует типу T. Это означает, что при выполнении операций
            //CRUD с помощью DbSet<T> будут происходить соответствующие изменения в соответствующей таблице базы данных.
            await _context.SaveChangesAsync();
            return t;
        }

        public async Task Delete(T t)
        {
            _context.Set<T>().Remove(t);
            await _context.SaveChangesAsync();
        }

        public async Task<T> Get(Guid id)
        {
            return await _context.Set<T>().FindAsync(id);
        }

        public async Task<IList<T>> GetAll()
        {
            return await _context.Set<T>().ToListAsync();
        }

        public async Task Update(T t)
        {
            _context.Set<T>().Update(t);
            await _context.SaveChangesAsync();
        }

    }
    /*
      UnitOfWork и GenericRepository являются широко используемыми паттернами проектирования в ASP.NET MVC и других современных фреймворках 
      для разработки веб-приложений.
      UnitOfWork - это паттерн проектирования, который позволяет объединить несколько операций базы данных в одну транзакцию.
      Это означает, что если в рамках одного действия происходит несколько изменений в базе данных, то они будут выполнены как единое целое,
      и в случае возникновения ошибки, все изменения будут отменены.
      Кроме того, паттерн UnitOfWork позволяет отделить логику доступа к базе данных от контроллеров, что повышает модульность и упрощает тестирование кода.

      GenericRepository - это паттерн проектирования, который позволяет создавать универсальные методы доступа к данным для любой сущности в базе данных.
      Таким образом, вместо того чтобы писать отдельные методы доступа для каждой сущности, мы можем использовать один и тот же набор методов для любой сущности,
      что повышает повторное использование кода и сокращает количество дублирующегося кода.
      Обычно UnitOfWork и GenericRepository используются вместе для управления доступом к данным в приложении. В рамках этого паттерна,
      UnitOfWork является основной точкой взаимодействия с базой данных,
      а GenericRepository обеспечивает универсальный интерфейс доступа к данным.
      В целом, использование этих паттернов позволяет создавать более чистый и модульный код,
      который легче поддерживать и тестировать. Однако, стоит заметить, что эти паттерны не всегда подходят для всех приложений и в некоторых случаях могут привести к излишней сложности. Поэтому, перед применением данных паттернов,
      следует обдумать все их плюсы и минусы и выбрать подходящий под конкретную задачу подход. 

      Плюсы UnitOfWork:

        Обеспечивает единообразный и целостный подход к управлению транзакциями базы данных в рамках приложения.
        Упрощает тестирование и поддержку кода, позволяя изолировать логику доступа к данным от контроллеров.
        Уменьшает количество повторяющегося кода и способствует повторному использованию кода.

      Минусы UnitOfWork:

        В некоторых случаях может приводить к излишней сложности и усложнению структуры приложения.
        Может оказаться избыточным для простых проектов, которые не требуют управления транзакциями.

      Плюсы GenericRepository:

        Обеспечивает единообразный и универсальный интерфейс доступа к данным для любой сущности в базе данных.
        Уменьшает количество дублирующегося кода и способствует повторному использованию кода.
        Упрощает тестирование и поддержку кода.

      Минусы GenericRepository:

        Не всегда может обеспечить оптимальную производительность, так как предоставляет универсальный интерфейс доступа к данным для всех сущностей в базе данных.
        Некоторые разработчики могут считать, что GenericRepository слишком обобщен и неудобен в использовании.
        В целом, использование UnitOfWork и GenericRepository может значительно упростить разработку приложения и повысить его модульность, но необходимо помнить, что эти паттерны не являются универсальными и должны применяться в зависимости от конкретных требований проекта и специфики задач, которые нужно решить.
     */
}
